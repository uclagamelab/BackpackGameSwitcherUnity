TODO:
pressing:
* rather than starting a game from a bat file, start game + (bat file, or autoit script)
* make sure works without image folder (seems to?)
* Add 'hidden' property to game, 'show hidden' to overall settings

less important:
* Custom cursors, hiding the cursor for other apps: https://devblogs.microsoft.com/scripting/use-powershell-to-change-the-mouse-pointer-scheme/
https://www.autoitscript.com/forum/topic/106233-hide-the-mouse-cursor/
* Clean up the settings menu
* Ditch the command line arguments, and make changeable via settings menu (?)
* finish making work with restart on crash
* ensure roughly robust to no games, corrupt json, bad files
* package joytokey profiles in game directories, and copy to joytokey directory
* package joytokey, rainmeter, autoit with app (for easier install)
* try to tidy up the project
* take another pass at the documentation

DESIGN NOTES:
* more space below the selected bottom tab 
* More space above the selected tab
* "dim" the unselected tabs
* extend the bottom gradient, or build shadows into those tabs

BUGS
* Needing to restart when you change folders, other settings?
* Bugs with applying changes.  

GAME ISSUES:
* Games that won't run full screen, don't have 1080p resolution (which ones?)
	-Unity games older than 3 and before don't respect fullscreen or width/height args

* Games that need their registrys set 
	(can record initial setup, but hard to get right on the first try)
	(Make Unity specific solution?  Programatically set the registry?)
	(Possible to suppress gamepad output? in joytokey, the other one?)
* Mouse issues:
	Add default mouse position to startup options

* Preserve JSON data not explicitly included in the class


FANCINESS:
* Add notes to game folders
* Make totally portable deploy (no installs required)
* Refactor, (rewrite?)
* Be able to create games from within Tools menu (relatively easy)
* About section
* Sort by creator
* Image galleries
* Video player (for non-playable projects, etc...)
* Ken Burns effect on images?
* Make a couple different 'skins'
* Support for 2 players
* Be able to optionally hide, or reskin cursor for games
* Doublecheck audit, see what it's able to show you
* Checking if a game has stalled???
	https://stackoverflow.com/questions/3500634/how-to-check-if-process-is-not-responding
	https://github.com/HeliosInteractive/OpenRoC


#### #### Architecture Notes #### #### #### #### #### ####

GameCatalog {List of gameDatas, able to populate self}s
	GameData {
		paths, images, metadata
	}

BGKeyListening { 
	Listening for the quit game key-combo
}

FGInput 
{ 
	Foreground Input, for controlling the menu 
}

ProcessManagement
{
	Windows, processes, cmd stuff, maybe some JoyToKey stuff hardcoded in for now
}

Front End Menu
{
	has access to the game catalog,
}

#### #### Other Notes #### #### #### #### #### ####
Goals:
Should be super easy to re-skin,
Should be super easy to change menu controls
Should be easy to add new data, and files to games
Should also work for non-games (just videos)
Probably would also like an extended image gallery / longer description in some cases

### ### Audit? #### #### #### #### #### ####
- check JSON validity
- check Exes, check if shortcuts valid
- check for missing image/video
- check for spaces in folder names.
- check that valid joytoKeyFiles are specified in JSON
- check general folder structure
- check validity of joyToKeyFiles (all have exit button mapped)

#### ####  Things found #### #### 
https://github.com/AntiMicro/antimicro (joy to key alternative, open source, might be able to cannibalize)

#### #### Focus notes #### #### #### #### #### ####
https://github.com/electron/electron/issues/2867
https://technet.microsoft.com/en-us/library/cc957208.aspx
http://www.thewindowsclub.com/disable-flashing-taskbar-buttons-windows (<- this one! toward the bottom of the article)
https://social.msdn.microsoft.com/Forums/windows/en-US/f21726d7-f3dd-4724-8333-5ce935d194cd/focus-stealing-guidance?forum=winforms