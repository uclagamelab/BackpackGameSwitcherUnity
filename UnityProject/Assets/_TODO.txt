EXTRA PRESSING:
* Make switcher get background input of gamepad, so it doesn't depend on joytokey? (background gamepad maybe not possible??)
Periodically re-apply menu profile in joytokey, in case something went wrong in switching back.

* reimpliment "vanilla" PC controls done for Kit:
	cc0641aa8c221b717898ec4504d95250e6b8fbba

* Make it easier to hide instructions for a game and just show description etc...d

alternative way of managing controller remapping (akin to startup settings?)
- JoyToKey 
- AntiMicro
- None (roll our own?????)

Testing todo:
-figure out lighttpd/local server?
-re-update elsie's game
-get DMA web credentials/download dma hosted webgl games.
-Ask Ivy(?)/Ansleigh(?) for their games
-Add tags (text file, separated by newlines? json???)

TODO:
pressing:
* if app takes too long to start, switcher gives up, but app launches shortly after (how to detect? wait longer, respect quit button if switcher doesn't have focu)
* Extract anything reusable from 'SwitcherApplicationController'
* Improve determination of whether a game is running or not, less dependent on process null/hasExited 
 - once launched say running, and only say has exited if window appears then disappears, or quit keycombo, but not before.
 - relevant line to fix is "if (_lastActionWasQuit)" in SwitcherApplicationController

less important:
* Make whole thing more joy to key agnostic (part of companion process?)
* Put JoyToKey in companion software (maybe a bad idea?)
	- hard to edit existing profiles
* finish making work with restart on crash
* take another pass at the documentation
* Replace builtin mouse recorder with autoit version (would allow for long clicks, maybe other stuff)
* Custom cursors, hiding the cursor for other apps: https://devblogs.microsoft.com/scripting/use-powershell-to-change-the-mouse-pointer-scheme/
https://www.autoitscript.com/forum/topic/106233-hide-the-mouse-cursor/
* package joytokey profiles in game directories, and copy to joytokey directory
* upload companion software somewhere? just add to git?
* autodetect window name

Refactor thoughts

**Simplified API for modifying skin
	Get List<GameData> of all available games
	Launch a game via its GameData
	Check if there is game running now, what game is currently running
	Event if game quits of its own accord
	Quit the current running game

Assuming ctrl-k settings menu remains the same
	Separate options not pertinent to other skins(?)

BUGS

GAME ISSUES:
* Games that won't run full screen, don't have 1080p resolution (which ones?)
	-Unity games older than 3 and before don't respect fullscreen or width/height args

* Games that need their registrys set 
	(can record initial setup, but hard to get right on the first try)
	(Make Unity specific solution?  Programatically set the registry?)
	(Possible to suppress gamepad output? in joytokey, the other one?)
* Mouse issues:
	Add default mouse position to startup options


FANCINESS:
* About section
* Playlists
* Sort by creator
* Image galleries
* Video player (for non-playable projects, etc...)
* Ken Burns effect on images?
* add "platform info" file, giving info about available controls, number of players, whether analog stick
* Doublecheck audit, see what it's able to show you
* Checking if a game has stalled???
	https://stackoverflow.com/questions/3500634/how-to-check-if-process-is-not-responding
	https://github.com/HeliosInteractive/OpenRoC


#### #### Architecture Notes #### #### #### #### #### ####

GameCatalog {List of gameDatas, able to populate self}s
	GameData {
		paths, images, metadata
	}

BGKeyListening { 
	Listening for the quit game key-combo
}

FGInput 
{ 
	Foreground Input, for controlling the menu 
}

ProcessManagement
{
	Windows, processes, cmd stuff, maybe some JoyToKey stuff hardcoded in for now
}

Front End Menu
{
	has access to the game catalog,
}

#### #### Other Notes #### #### #### #### #### ####

### ### Audit? #### #### #### #### #### ####
- check JSON validity
- check Exes, check if shortcuts valid
- check for missing image/video
- check that valid joytoKeyFiles are specified in JSON
- check general folder structure
- check validity of joyToKeyFiles (all have exit button mapped)

#### ####  Things found #### #### 
https://github.com/ViGEm (a bunch of 'em)
https://github.com/Snoothy/UCR (UNIVERSAL control remapper, updated somewhat recently, uses vjoy)
https://github.com/shauleiz/vJoy/releases (simulates a gamepad, has c# interface)
http://vjoystick.sourceforge.net/site/

https://github.com/AntiMicro/antimicro (joy to key alternative, open source, might be able to cannibalize)

#### #### Focus notes #### #### #### #### #### ####
https://github.com/electron/electron/issues/2867
https://technet.microsoft.com/en-us/library/cc957208.aspx
http://www.thewindowsclub.com/disable-flashing-taskbar-buttons-windows (<- this one! toward the bottom of the article)
https://social.msdn.microsoft.com/Forums/windows/en-US/f21726d7-f3dd-4724-8333-5ce935d194cd/focus-stealing-guidance?forum=winforms