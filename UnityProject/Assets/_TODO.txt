TODO:
pressing:
* Add 'hidden' property to game, 'show hidden' to overall settings

less important:
* Custom cursors, hiding the cursor for other apps: https://devblogs.microsoft.com/scripting/use-powershell-to-change-the-mouse-pointer-scheme/
https://www.autoitscript.com/forum/topic/106233-hide-the-mouse-cursor/
* Clean up the settings menu
* Ditch the command line arguments, and make changeable via settings menu (?)
* finish making work with restart on crash
* package joytokey profiles in game directories, and copy to joytokey directory
* take another pass at the documentation
* upload companion software somewhere? just add to git?
* try to make a new skin, refactoring as necessary

BUGS
* If no valid folder, need to completely restart after setting a good one
* Needing to restart when you change folders, other settings?
* Bugs with applying changes.  

GAME ISSUES:
* Games that won't run full screen, don't have 1080p resolution (which ones?)
	-Unity games older than 3 and before don't respect fullscreen or width/height args

* Games that need their registrys set 
	(can record initial setup, but hard to get right on the first try)
	(Make Unity specific solution?  Programatically set the registry?)
	(Possible to suppress gamepad output? in joytokey, the other one?)
* Mouse issues:
	Add default mouse position to startup options

* Preserve JSON data not explicitly included in the class


FANCINESS:
* Playlists
* About section
* Sort by creator
* Image galleries
* Video player (for non-playable projects, etc...)
* Ken Burns effect on images?
* add "platform info" file, giving info about available controls, number of players, whether analog stick
* Doublecheck audit, see what it's able to show you
* Checking if a game has stalled???
	https://stackoverflow.com/questions/3500634/how-to-check-if-process-is-not-responding
	https://github.com/HeliosInteractive/OpenRoC


#### #### Architecture Notes #### #### #### #### #### ####

GameCatalog {List of gameDatas, able to populate self}s
	GameData {
		paths, images, metadata
	}

BGKeyListening { 
	Listening for the quit game key-combo
}

FGInput 
{ 
	Foreground Input, for controlling the menu 
}

ProcessManagement
{
	Windows, processes, cmd stuff, maybe some JoyToKey stuff hardcoded in for now
}

Front End Menu
{
	has access to the game catalog,
}

#### #### Other Notes #### #### #### #### #### ####

### ### Audit? #### #### #### #### #### ####
- check JSON validity
- check Exes, check if shortcuts valid
- check for missing image/video
- check that valid joytoKeyFiles are specified in JSON
- check general folder structure
- check validity of joyToKeyFiles (all have exit button mapped)

#### ####  Things found #### #### 
https://github.com/ViGEm (a bunch of 'em)
https://github.com/Snoothy/UCR (UNIVERSAL control remapper, updated somewhat recently, uses vjoy)
https://github.com/shauleiz/vJoy/releases (simulates a gamepad, has c# interface)
http://vjoystick.sourceforge.net/site/

https://github.com/AntiMicro/antimicro (joy to key alternative, open source, might be able to cannibalize)

#### #### Focus notes #### #### #### #### #### ####
https://github.com/electron/electron/issues/2867
https://technet.microsoft.com/en-us/library/cc957208.aspx
http://www.thewindowsclub.com/disable-flashing-taskbar-buttons-windows (<- this one! toward the bottom of the article)
https://social.msdn.microsoft.com/Forums/windows/en-US/f21726d7-f3dd-4724-8333-5ce935d194cd/focus-stealing-guidance?forum=winforms