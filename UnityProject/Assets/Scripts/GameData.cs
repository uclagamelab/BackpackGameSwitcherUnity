/*
 This class also seems a little heavy...

 */

using System.Collections;
using System.Collections.Generic;
using System.IO;
using UnityEngine;

[System.Serializable]
public class GameData
{
    #region SERIALIZED --------------------------------------------------
    public string title;

    public string designers;
  
    public string windowTitle = null;

    public string joyToKeyConfig_singlePlayer = null;
    
    public string exePath;

    public string description;

    public ControlInstructions instructions;

    public GameLaunchSettings launchSettings;// = new GameLaunchSettings();
    #endregion ---------------------------------------------------------

    #region --- UNSERIALIZED ------------------------------------------

    [System.NonSerialized]
    DirectoryInfo _gameFolder = null;
    public DirectoryInfo rootFolder => _gameFolder;

    [System.NonSerialized]
    public string image;

    //[System.NonSerialized]
    //public Texture2D overrideInstructionsImage = null;

    [System.NonSerialized]
    public string videoUrl = null;

    [System.NonSerialized]
    public string executable;

    [System.NonSerialized]
    public Texture2D overrideInstructionsImage = null;
    [System.NonSerialized]
    public Texture previewImg;
    #endregion -----------------------------------------------

    [System.Serializable]
    public class ControlInstructions
    {
        public string joystickInstructions;

        public string[] buttonInstructions = new string[6];

        public string getButtonLabel(int buttonIdx)
        {
            return buttonInstructions[buttonIdx - 1];
        }

    }

    public string GetDescriptionText()
    {
        return XuFileSystemUtil.LoadTextFromDisk(this.descriptionFilePath);
    }

    public string GetInstructionText()
    {
        return XuFileSystemUtil.LoadTextFromDisk(this.instructionsFilePath);
    }



    public string GetInfoJSON(bool prettify = true)
    {
        string rawJson =  !File.Exists(jsonFilePath) ? null : File.ReadAllText(jsonFilePath);
        if (string.IsNullOrEmpty(rawJson))
        {
            rawJson = JsonUtility.ToJson(this, prettify);
            XuFileSystemUtil.WriteStringToFile(rawJson, jsonFilePath);
        }
        //if (prettify)
        //{
        //    rawJson = JSONPrettifier.Prettify(rawJson);
        //}
        return rawJson;
    }

    public void flushChangesToJson()
    {
        string newJson = JsonUtility.ToJson(this, true);
        WriteJSON(newJson);
        XuFileSystemUtil.WriteStringToFile(this.description, descriptionFilePath);

    }

    public void WriteJSON(string newJson)
    {
        XuFileSystemUtil.WriteStringToFile(newJson, this.jsonFilePath);
    }

    string _descriptionFilePathCached = null;
    string descriptionFilePath
    {
        get
        {
            if (_gameFolder.Exists && _descriptionFilePathCached == null)
            {
                string descriptionFileExtension = ".description.txt";
                //--- Look for a file ending in .desc.text ----------------
                string[] filesWithDescriptionExtension = Directory.GetFiles(_gameFolder.FullName, "*"+ descriptionFileExtension);
                if (filesWithDescriptionExtension.Length > 0)
                {
                    _descriptionFilePathCached = filesWithDescriptionExtension[0];
                }
                else //--- Create it, if it doesn't exist ---------------
                {
                    string newPath = Path.Combine(_gameFolder.FullName, _gameFolder.Name + descriptionFileExtension);
                    XuFileSystemUtil.WriteStringToFile("[AUTOGENERATED EMPTY DESCRIPTION]", newPath);
                    _descriptionFilePathCached = newPath;
                }

               
            }

            return _descriptionFilePathCached;
        }
    }

    string _instructionsFilePathCached = null;
    string instructionsFilePath
    {
        get
        {
            if (_gameFolder.Exists && _instructionsFilePathCached == null)
            {
                string instructionsFileExtension = ".instructions.txt";
                //--- Look for a file ending in .instructions.text ----------------
                string[] filesWithInstructionExtension = Directory.GetFiles(_gameFolder.FullName, "*" + instructionsFileExtension);
                if (filesWithInstructionExtension.Length > 0)
                {
                    _instructionsFilePathCached = filesWithInstructionExtension[0];
                }
                else //--- Create it, if it doesn't exist ---------------
                {
                    string newPath = Path.Combine(_gameFolder.FullName, _gameFolder.Name + instructionsFileExtension);
                    XuFileSystemUtil.WriteStringToFile("[AUTOGENERATED EMPTY INSTRUCTIONS]", newPath);
                    _instructionsFilePathCached = newPath;
                }


            }

            return _instructionsFilePathCached;
        }
    }


    string jsonFilePath
    {
        get
        {
            if (string.IsNullOrEmpty(_gameFolder?.FullName))
            {
                Debug.LogError("must set game folder before you can get jsonFilePath");
                return null;
            }
            return System.IO.Path.Combine(_gameFolder.FullName, "SwitcherGameInfo.json");
        }
    }

    public GameData(string gameFolderPath)
    {
        _gameFolder = new DirectoryInfo(gameFolderPath);//IMPORTANT that this gets set immediately


        // --- Find the JSON info file ---------

        //bool jsonInfoFound = File.Exists(jsonFilePath);
        //string[] jsonFiles = Directory.GetFiles(_gameFolder.FullName, "*.json");
        string gameDataJson = GetInfoJSON();
        string diskDescription = GetDescriptionText();
        string diskInstructions = GetInstructionText();

        try
        {
            JsonUtility.FromJsonOverwrite(gameDataJson, this);
        }
        catch (System.Exception e)
        {
            Debug.LogError("problem parsing json in " + _gameFolder.FullName);
            return;
        }


        this.description = diskDescription;
            

        if (string.IsNullOrEmpty(this.title))
        {
            this.title = _gameFolder.Name;
            flushChangesToJson();
        }

        // --- Find the exe ------------------------
        setUpExe(_gameFolder);

        // --- Find the preview images ------------------------
        setUpImages(_gameFolder);

        // --- Find the instructions ------------------------

        //--- set up video ---------------
        setUpVideo(_gameFolder);

        setUpInstructionsOverlay(_gameFolder);

        this.launchSettings.SetUpWithGame(this);
    }

    void setUpInstructionsOverlay(DirectoryInfo gameFolder)
    {
        GameCatalog.Instance.StartCoroutine(setUpInstructionsOverlayRoutine(gameFolder));
    }

    IEnumerator setUpInstructionsOverlayRoutine(DirectoryInfo gameFolder)
    {
        string instructionsFolder = gameFolder.FullName + "/instructions";
        if (Directory.Exists(instructionsFolder))
        {

            List<string> imgsInDirectory = GetFilesMultipleSearchPattern(instructionsFolder, new string[] { "*.png" });
            foreach (string v in imgsInDirectory)
            {
                //Debug.Log(v + "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
            }
            if (imgsInDirectory.Count > 0)
            {
               string ovlUrl = imgsInDirectory[0];

                this.overrideInstructionsImage = new Texture2D(4, 4, TextureFormat.DXT5, false); //DXT5, assuming image is png
                WWW instOvlWww = new WWW(ovlUrl);
                yield return instOvlWww;

                instOvlWww.LoadImageIntoTexture(this.overrideInstructionsImage);

                //GameObject sp = GameObject.CreatePrimitive(PrimitiveType.Sphere);
                //sp.GetComponent<Renderer>().material.mainTexture = this.instructionsOverlay;
            }



        }

    }

    void setUpVideo(DirectoryInfo gameFolder)
    {

        string videoFolder = gameFolder.FullName + "/video";
        if (Directory.Exists(videoFolder))
        {
            //try to find a .lnk
            //TODO : figure out valid video types...
            List<string> videosInDirectory = GetFilesMultipleSearchPattern(videoFolder, new string[] { "*.mp4", "*.mov", "*.ogv", "*.flv" });
            foreach (string v in videosInDirectory)
            {
                //Debug.Log(v + "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
            }
            if (videosInDirectory.Count > 0)
            {
                this.videoUrl = videosInDirectory[0];
            }
        }

    }
    void setUpExe(DirectoryInfo gameFolder)
    {
        string platform = "windows";

        string exeFolder = gameFolder.FullName + "/" + platform;

        //try to find a .lnk
        bool exeFolderExists = Directory.Exists(exeFolder);
        if (!exeFolderExists)
        {
            return;
        }

        string[] shortcutsInGameDirectory = Directory.GetFiles(exeFolder, "*.lnk");
        string[] batchFilesInGameDirectory = Directory.GetFiles(exeFolder, "*.bat");

        if (batchFilesInGameDirectory.Length == 1)
        {
            this.executable = batchFilesInGameDirectory[0];
        }
        else if (shortcutsInGameDirectory.Length == 1) //use a shortcut
        {
            //TODO : need to think of something smarter... 
            //optionally specify start file???
            this.executable = shortcutsInGameDirectory[0];

            //verify existence of link...




        }
        else //try to find an exe...
        {
            //string[] subdirectories = Directory.GetDirectories(gameFolder.FullName);
            string[] exeFolderContents = Directory.GetFiles(exeFolder, "*.exe");

            if (exeFolderContents.Length == 0)
            {
                Debug.Log("couldn't find an exe");
                this.executable = "";
            }
            else if (exeFolderContents.Length > 1)
            {
                Debug.Log("Multiple exes in the folder, don't know which one to use!");
            }
            else //just 1
            {
                this.executable = exeFolderContents[0];
            }
        }



    }

    void setUpImages(DirectoryInfo gameFolder)
    {
        List<string> previewImageFolderContents = GetFilesMultipleSearchPattern(gameFolder.FullName + "/image", new string[] { "*.png", "*.jpg", "*.gif" });

        if (previewImageFolderContents.Count > 0)
        {
            string previewImgPath = previewImageFolderContents[0];

            Camera.main.GetComponent<MonoBehaviour>().StartCoroutine(getImage(previewImgPath));
        }
    }

    public string joyToKeyConfig
    {
        get
        {
            if (string.IsNullOrEmpty(joyToKeyConfig_singlePlayer))
            {
                return "default.cfg";
            }
            else
            {
                return joyToKeyConfig_singlePlayer;
            }
        }

        set
        {
            joyToKeyConfig_singlePlayer = value;
        }
    }


    public string directory
    {
        get
        {
            FileInfo fi = new FileInfo(executable);
            return fi.Directory.FullName;
        }
    }

    public string appFile
    {
        get
        {
            FileInfo fi = new FileInfo(executable);
            return fi.Name;
        }
    }


    public void Audit(System.Text.StringBuilder auditMsgStringBuilder)
    {
        GameData dat = this;
        if (string.IsNullOrEmpty(dat.exePath))
        {
            auditMsgStringBuilder.AppendLine(dat.title + " has empty exe path");
        }
        else if (!System.IO.File.Exists(Path.Combine(dat.rootFolder.FullName, dat.exePath)))
        {
            auditMsgStringBuilder.AppendLine(dat.title + ", no file found at specified exe path");
        }

        if (string.IsNullOrEmpty(dat.joyToKeyConfig))
        {
            auditMsgStringBuilder.AppendLine(dat.title + " doesn't specify joy to key config");
        }
        else if (!System.IO.File.Exists(Path.Combine(GameCatalog.Instance.joyToKeyData.directory, dat.joyToKeyConfig)))
        {
            auditMsgStringBuilder.AppendLine(dat.title + ", joytokey config: ;" + dat.joyToKeyConfig + "' not found");
        }

        this.launchSettings.Audit(auditMsgStringBuilder);
    }


    enum GameType
    {
        unity, processing, other
    }


    public GameData()
    {
        title = "";
        executable = "";
        designers = "";
        description = "";
    }

    List<string> GetFilesMultipleSearchPattern(string path, string[] searchPatterns)
    {
        List<string> allResults = new List<string>();
        foreach (string searchPattern in searchPatterns)
        {
            string[] results = Directory.GetFiles(path, searchPattern);
            foreach (string individResult in results)
            {
                allResults.Add(individResult);
            }
        }

        return allResults;
    }

    IEnumerator getImage(string texturePath)
    {

        string textureURI = texturePath;

        WWW textureReq = new WWW(textureURI);

        yield return textureReq;


        this.previewImg = textureReq.texture;
    }

}
